{"version":3,"sources":["Components/TransferLearning/TransferLearning.types.ts","Components/TransferLearning/TransferLearning.tsx","Components/ImageClassification/ImageClassification.tsx","App.tsx","index.tsx"],"names":["BTN_TYPES","Group","Button","TransferLearning","video","model","trainingClassNum","mobilenet","classifier","videoLabel","state","loading","trainingExamples","trainExamplCounter","actionBtn","add","handleLoadingMode","setState","handleActionBtn","e","target","value","onAddClick","onTrainClick","props","train","onTrainExamples","onSingleExampleTrain","index","addImage","counter","push","key","loss","console","log","classify","onResultsReady","err","results","label","String","toUpperCase","getTLLabel","renderTrainingExamples","Search","examples","i","disabled","placeholder","enterButton","onSearch","this","id","className","size","indicator","type","onChange","onClick","length","Component","ImageClassification","selectedModel","onModelSelect","onLoadModel","a","async","tf","defaultValue","Option","MODELS","imageClassification","objectDetection","transferLearning","Header","Content","Footer","p5","p5Lib","MainApp","width","height","objects","tlLabel","setup","remove","createCanvas","parent","createCapture","VIDEO","ml5","onObjectDetect","numLabels","onTLModelReady","classification","draw","drawODLabel","drawTLLabel","image","xTextPosition","x","yTextPosition","y","rectX","rectY","rectWidth","w","rectHeight","h","fill","noStroke","text","noFill","strokeWeight","textSize","stroke","rect","getModels","component","detect","models","theme","mode","style","lineHeight","textAlign","Object","keys","map","Item","display","alignItems","flexDirection","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.346df982.chunk.js","sourcesContent":["export type Props = {\n  p5Lib: any,\n  classifier: any,\n  getTLLabel: (label: string) => void;\n};\nexport type State = {\n  loading: boolean,\n  actionBtn: string,\n  trainExamplCounter: number,\n  trainingExamples: {\n    key: string,\n    counter: number\n  }[]\n};\n\nexport enum BTN_TYPES {\n  add = 'add',\n  train = 'train'\n};","import React, { Component } from 'react';\nimport { Input, Radio, Spin, Icon } from 'antd';\nimport { RadioChangeEvent } from 'antd/lib/radio';\n\nimport { Props, State, BTN_TYPES } from './TransferLearning.types';\n\nconst { Group, Button } = Radio;\n\nexport class TransferLearning extends Component<Props, State> {\n  video: any = null;\n  model = 'MobileNet';\n  trainingClassNum = 3;\n  mobilenet: any = null;\n  classifier: any = null;\n  videoLabel: string | null = null;\n\n  state: State = {\n    loading: false,\n    trainingExamples: [],\n    trainExamplCounter: 0,\n    actionBtn: BTN_TYPES.add\n  };\n\n  componentWillUnmount() {\n    this.video = null;\n  }\n\n  handleLoadingMode = (loading: boolean) => this.setState({ loading });\n  handleActionBtn = (e: RadioChangeEvent) =>\n    this.setState({ actionBtn: e.target.value });\n  onAddClick = () =>\n    this.setState({ trainExamplCounter: this.state.trainExamplCounter + 1 });\n  onTrainClick = () => {\n    this.handleLoadingMode(true);\n    this.props.classifier.train(this.onTrainExamples);\n  };\n\n  onSingleExampleTrain = (value: string, index: number) => {\n    const { trainingExamples } = this.state;\n    // single training\n    this.props.classifier.addImage(value);\n\n    // do UI stuff\n    if (trainingExamples[index]) {\n      trainingExamples[index].counter += 1;\n    } else {\n      trainingExamples.push({ key: value, counter: 1 });\n    }\n\n    this.setState({ trainingExamples });\n  };\n\n  onTrainExamples = (loss: number | null) => {\n    if (loss === null) {\n      this.handleLoadingMode(false);\n      console.log('Trainning is completed !!!');\n\n      this.props.classifier.classify(this.onResultsReady);\n    } else {\n      console.log('Loss value:', loss);\n    }\n  };\n\n  onResultsReady = (\n    err: string,\n    results: { [k: string]: string | number }[]\n  ) => {\n    if (err) {\n      console.log(err);\n    } else {\n      const label = String(results[0].label).toUpperCase();\n      this.props.getTLLabel(label);\n\n      this.props.classifier.classify(this.onResultsReady);\n      this.setState({ trainingExamples: [] });\n    }\n  };\n\n  renderTrainingExamples = () => {\n    const { Search } = Input;\n    const { trainingExamples, trainExamplCounter, loading } = this.state;\n\n    const examples = [];\n\n    for (let i = 0; i < trainExamplCounter; i++) {\n      const counter = trainingExamples[i] ? trainingExamples[i].counter : null;\n\n      examples.push(\n        <Search\n          key={i}\n          disabled={loading}\n          placeholder='Train expample'\n          enterButton={`+ ${counter || 0}`}\n          onSearch={(value: string) => this.onSingleExampleTrain(value, i)}\n        />\n      );\n    }\n\n    return <>{examples}</>;\n  };\n\n  render() {\n    const { loading, trainingExamples } = this.state;\n\n    return (\n      <div id='tl-wrapper'>\n        <div className='flex m'>\n          {loading && (\n            <div className='m'>\n              <Spin size='large' indicator={<Icon type='loading' />} />\n            </div>\n          )}\n          <Group value={this.state.actionBtn} onChange={this.handleActionBtn}>\n            <Button\n              disabled={loading}\n              value={BTN_TYPES.add}\n              onClick={this.onAddClick}\n            >\n              Add\n            </Button>\n            <Button\n              disabled={loading || !trainingExamples.length}\n              value={BTN_TYPES.train}\n              onClick={this.onTrainClick}\n            >\n              Train\n            </Button>\n          </Group>\n          {this.renderTrainingExamples()}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport { Select } from 'antd';\n\nimport { Props, State } from './ImageClassification.types';\n\nconst MobileNet = 'mobilenet';\n\nexport class ImageClassification extends Component<Props, State> {\n  state: State = {\n    selectedModel: null\n  }\n  model: any | null = null;\n\n  onModelSelect = (model: string) => {\n    this.setState({ selectedModel: model });\n    this.onLoadModel();\n  };\n\n  onLoadModel = async () => {\n    this.model = await tf.loadModel('https://github.com/UlyJsi/tensorflowjs-react/blob/master/src/models/mobilenet/model.json');\n\n    console.log(this.model)\n  }\n\n  render() {\n    return (\n      <div className='flex m'>\n        <Select defaultValue=\"Select model\" onChange={this.onModelSelect}>\n          <Select.Option key={MobileNet} value={MobileNet}>MobileNet</Select.Option>\n        </Select>\n      </div>\n    )\n  }\n};","import React, { Component } from 'react';\nimport { Layout, Menu, Spin, Icon } from 'antd';\nimport * as p5Lib from 'p5';\nimport * as ml5 from 'ml5';\nimport Sketch from 'react-p5';\nimport { TransferLearning } from './Components/TransferLearning/TransferLearning';\nimport { ImageClassification } from './Components/ImageClassification/ImageClassification';\n\nimport { State, MlModels, ODResults } from './App.types';\n\nconst MODELS = {\n  imageClassification: 'imageClassification',\n  objectDetection: 'objectDetection',\n  transferLearning: 'transferLearning'\n};\n\nconst { Header, Content, Footer } = Layout;\nconst p5 = new p5Lib();\n\nclass MainApp extends Component {\n  state: State = {\n    loading: false,\n    selectedModel: null\n  };\n\n  width: number = 1000;\n  height: number = 700;\n  mobilenet: any = null;\n  classifier: any = null;\n  objects: ODResults = [];\n  video: null | any = null;\n  trainingClassNum: number = 3;\n  tlLabel: string | null = null;\n  model: string | null | any = null;\n\n  setup = () => {\n    const { selectedModel } = this.state;\n\n    if (selectedModel === MODELS.imageClassification) {\n      this.video = null;\n      p5.remove();\n\n      return;\n    }\n\n    if (this.video === null) {\n      p5.createCanvas(this.width, this.height)\n        .parent('main-wrapper')\n        .id('main-canvas');\n      this.video = p5.createCapture(p5.VIDEO).parent('main-wrapper');\n    }\n\n    if (selectedModel === MODELS.objectDetection) {\n      this.model = ml5.YOLO(this.video, this.onObjectDetect);\n      this.setState({ loading: true });\n    }\n\n    if (selectedModel === MODELS.transferLearning) {\n      this.model = 'MobileNet';\n      this.mobilenet = ml5.featureExtractor(\n        this.model,\n        { numLabels: this.trainingClassNum },\n        this.onTLModelReady\n      );\n      this.classifier = this.mobilenet.classification(this.video);\n    }\n  };\n\n  draw = () => {\n    const { selectedModel } = this.state;\n\n    if (selectedModel === MODELS.imageClassification) return;\n\n    if (selectedModel === MODELS.objectDetection) {\n      this.drawODLabel();\n    }\n\n    if (selectedModel === MODELS.transferLearning) {\n      this.drawTLLabel();\n    }\n  };\n\n  drawODLabel = () => {\n    p5.image(this.video, 0, 0, this.width, this.height);\n\n    for (let i = 0; i < this.objects.length; i++) {\n      const label = String(this.objects[i].label).toUpperCase();\n\n      const xTextPosition = this.objects[i].x * this.width;\n      const yTextPosition = this.objects[i].y * this.height - 5;\n\n      const rectX = this.objects[i].x * this.width;\n      const rectY = this.objects[i].y * this.height;\n      const rectWidth = this.objects[i].w * this.width;\n      const rectHeight = this.objects[i].h * this.height;\n\n      p5.fill(11, 104, 255);\n      p5.noStroke();\n      p5.text(label, xTextPosition, yTextPosition);\n      p5.noFill();\n      p5.strokeWeight(4);\n      p5.textSize(42);\n      p5.stroke(11, 104, 255);\n      p5.rect(rectX, rectY, rectWidth, rectHeight);\n    }\n  };\n\n  drawTLLabel = () => {\n    const x = 100,\n      y = 100;\n\n    p5.image(this.video, 0, 0, this.width, this.height);\n    p5.fill(11, 104, 255);\n    p5.textSize(42);\n\n    this.tlLabel && p5.text(this.tlLabel, x, y);\n  };\n\n  getTLLabel = (label: string) => {\n    this.tlLabel = label;\n  };\n\n  getModels = (): MlModels => {\n    return {\n      [MODELS.imageClassification]: {\n        label: 'Image classification',\n        component: <ImageClassification />\n      },\n      [MODELS.objectDetection]: {\n        label: 'Object detection',\n        component: <></>\n      },\n      [MODELS.transferLearning]: {\n        label: 'Transfer learning',\n        component: (\n          <TransferLearning\n            p5Lib={p5}\n            classifier={this.classifier}\n            getTLLabel={this.getTLLabel}\n          />\n        )\n      }\n    };\n  };\n\n  onObjectDetect = () => {\n    this.setState({ loading: false });\n    console.log('Object detection model is ready !!!');\n\n    if (this.model && typeof this.model !== 'string') {\n      this.model.detect((err: string, results: ODResults) => {\n        this.objects = results;\n        this.onObjectDetect();\n      });\n    }\n  };\n\n  onModelSelect = ({ key }: { key: string }) => {\n    this.setState({ selectedModel: key }, () => this.setup());\n  };\n\n  onTLModelReady = () => {\n    console.log('Transfer learning model is ready !!!');\n    this.setState({ loading: false });\n  };\n\n  render() {\n    const { selectedModel, loading } = this.state;\n    const models = this.getModels();\n\n    return (\n      <Layout>\n        <Header>\n          <Menu\n            theme='dark'\n            mode='horizontal'\n            onClick={this.onModelSelect}\n            style={{ lineHeight: '64px', textAlign: 'center' }}\n          >\n            {Object.keys(models).map(key => (\n              <Menu.Item key={key}>{models[key].label}</Menu.Item>\n            ))}\n          </Menu>\n        </Header>\n\n        <Content\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            flexDirection: 'column'\n          }}\n          id='main-wrapper'\n        >\n          {loading && (\n            <div className='m'>\n              <Spin size='large' indicator={<Icon type='loading' />} />\n            </div>\n          )}\n\n          {selectedModel && (\n            <>\n              {models[selectedModel].component}\n              <Sketch setup={this.setup} draw={this.draw} />\n            </>\n          )}\n        </Content>\n\n        <Footer style={{ textAlign: 'center' }}>Made with fun &#9786;</Footer>\n      </Layout>\n    );\n  }\n}\n\nexport default MainApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport MainApp from './App';\n\nimport './styles/index.css';\n\nReactDOM.render(<MainApp />, document.getElementById('root'));\n"],"sourceRoot":""}